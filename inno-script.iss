; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0593FD6C-D524-4ECB-A6B0-28A52F720B18}}
AppName=Secops Solution CLI
AppVersion=1.1.31
;AppVerName=Secops Solution CLI 1.0
AppPublisher=Secops Solution, Inc.
AppPublisherURL=https://secopsolution.com/
AppSupportURL=https://secopsolution.com/
AppUpdatesURL=https://secopsolution.com/
DefaultDirName={autopf}\Secops Solution CLI
DisableDirPage=yes
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non-administrative install mode (install for the current user only).
PrivilegesRequired=admin
OutputBaseFilename=Secops_Solution_CLI_installer
SetupIconFile=..\secops_cli\secops_cli.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "install-service.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "secops_cli_windows-latest.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "SecopsService.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "secops_server.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "secops_uninstaller.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "uninstall-service.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "secops_agent_registration_module.exe"; DestDir: "{app}"; Flags: dontcopy ignoreversion
source: "secops_cli.ico"; DestDir: "{app}"; Flags: ignoreversion
source: "secops_windows_updater.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "secops_domain_connectivity_check.exe"; DestDir: "{app}"; Flags: dontcopy ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\.exe\OpenWithProgids"; ValueType: string; ValueName: "SecopsSolutionCLI.exe"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\SecopsSolutionCLI.exe"; ValueType: string; ValueName: ""; ValueData: "Secops Solution CLI"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\SecopsSolutionCLI.exe\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\secops_cli_windows-latest.exe,0"
Root: HKA; Subkey: "Software\Classes\SecopsSolutionCLI.exe\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\secops_cli_windows-latest.exe"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\secops_cli_windows-latest.exe\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\Secops Solution CLI"; Filename: "{app}\secops_cli_windows-latest.exe"
Name: "{autodesktop}\Secops Solution CLI"; Filename: "{app}\secops_cli_windows-latest.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\install-service.bat"; Parameters: "/x"; Flags: runhidden runascurrentuser;

[Code]
const
  AgreementText =
    'SOFTWARE LICENSE AGREEMENT' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION, INC with principal offices at 651 N Broad St, Suite 201, Middletown, New Castle, Delaware 19709, USA (SECOPS SOLUTION), and the Licensee hereby agree as follows' + #13#10 +
    '' + #13#10 +
    '1. Definitions' + #13#10 +
    '' + #13#10 +
    'Terms used herein shall have the following definitions:' + #13#10 +
    '' + #13#10 +
    'LICENSEE: The person or company which has requested a Trial License and accepted the responsibility for ensuring that all usage of the SECOPS SOLUTION Programs complies with the terms of this Software License Agreement.' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION PROGRAM: The computer program(s) specified in a License Supplement and furnished by SECOPS SOLUTION to Licensee under the terms of this Software License Agreement, including the SECOPS SOLUTION documentation for such program.' + #13#10 +
    '' + #13#10 +
    'LICENSE SUPPLEMENT: A supplement to this Software License Agreement (contained in the Appendix below) specifying each SECOPS SOLUTION Program to be licensed hereunder, including the license type, license fees and duration. A License Supplement may modify the terms of a previous License Supplement but may not modify the terms of this Software License Agreement.' + #13#10 +
    '' + #13#10 +
    '2. Delivery and Documentation' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION agrees to provide executable versions of each SECOPS SOLUTION Program specified in a License Supplement. Licensee shall install the SECOPS SOLUTION Programs in accordance with documentation and materials furnished by SECOPS SOLUTION.' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION shall provide Licensee with electronic versions of the documentation for the SECOPS SOLUTION Programs.' + #13#10 +
    '' + #13#10 +
    '3. License' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION hereby grants to Licensee and Licensee accepts from SECOPS SOLUTION a non-exclusive, non-transferable, royalty-free license solely for evaluation purposes.' + #13#10 +
    '' + #13#10 +
    '4. Restrictions on Use' + #13#10 +
    '' + #13#10 +
    'Licensee agrees not to' + #13#10 +
    '' + #13#10 +
    'modify, reverse compile, disassemble, or otherwise reverse engineer any SECOPS SOLUTION Program, or allow anyone else to do so (except only to the extent such prohibition is contrary to applicable law);' + #13#10 +
    '' + #13#10 +
    'attempt to access or use portions of the SECOPS SOLUTION Program code for which Licensee has not acquired a license; or' + #13#10 +
    '' + #13#10 +
    'except as specifically authorized herein, distribute or transfer the SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    'Licensee also agrees not to remove or destroy any proprietary markings or legends or any encrypted license keys or similar security devices placed upon or contained within any SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    'Each SECOPS SOLUTION Program shall be used by the Licensee only for the purpose of evaluating suitability of the program for the Licensee''s proposed applications. For the avoidance of any doubt all output generated from any SECOPS SOLUTION Program including models, input files, images including screenshots shall not be used for commercial or research purposes, publications, or presentations without the express written consent of SECOPS SOLUTION. All files provided by SECOPS SOLUTION and all output generated from these files shall remain the property of SECOPS SOLUTION and shall not be used for purposes other than internal evaluation.' + #13#10 +
    '' + #13#10 +
    'Licensee shall not use any SECOPS SOLUTION Program for the purpose of developing products which compete with the SECOPS SOLUTION Programs. In no event shall Licensee make all or any part of any SECOPS SOLUTION Program available to any third person as part of a data services operation or application services provider or otherwise.' + #13#10 +
    '' + #13#10 +
    'All use of any SECOPS SOLUTION Program shall be under the direct supervision and control of the Licensee. Licensee hereby asserts to be fully cognizant of the terms and conditions of this Software License Agreement, and to have the authority to exercise such supervision and control.' + #13#10 +
    '' + #13#10 +
    'Licensee understands and acknowledges that it is granted only those rights set out in this Software License Agreement and License Supplement and no other rights.' + #13#10 +
    '' + #13#10 +
    '5. Ownership' + #13#10 +
    '' + #13#10 +
    'Licensee acknowledges and agrees that neither this Software License Agreement nor any License Supplement grants Licensee any title or rights of ownership in any SECOPS SOLUTION Program or any right to use, copy, transfer or disclose all or any portion of any SECOPS SOLUTION Program except as expressly provided in this Software License Agreement and the applicable License Supplement.' + #13#10 +
    '' + #13#10 +
    'All right, title, and interest in any SECOPS SOLUTION Program and in any ideas and know-how which are developed by SECOPS SOLUTION in the course of providing any technical services, including any enhancements or modifications made to a SECOPS SOLUTION Program, shall at all time remain the property of SECOPS SOLUTION. Licensee acknowledges and agrees that the SECOPS SOLUTION Program is licensed, not sold.' + #13#10 +
    '' + #13#10 +
    '6. Duration' + #13#10 +
    '' + #13#10 +
    'The license granted under this Software License Agreement shall commence for each SECOPS SOLUTION Program on the date ("Start Date") that the license key for that SECOPS SOLUTION Program has been sent to the Licensee. If no license key has been sent to the Licensee, then the Start Date will be the date when the Licensee has received or downloaded the SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    'Unless earlier terminated as provided in Section 12 (Termination), the license as to any SECOPS SOLUTION Program licensed on a periodic basis shall continue until the end of the initial license period specified in a License Supplement. If no license period is specified in a License Supplement, the license shall terminate fifteen (15) days from Start Date, at which time the Licensee must return or delete all copies of that SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    '7. Charges and Payment' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION will provide Licensee trial license free of all charges and fees for the period specified in a License Supplement.' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION reserves the right to change its prices, including license fees, without notice.' + #13#10 +
    '' + #13#10 +
    '8. Maintenance, Enhancement and Support' + #13#10 +
    '' + #13#10 +
    'Support for the duration of the trial license will be provided at SECOPS SOLUTION''s sole discretion and may be conditioned upon payment of additional fees.' + #13#10 +
    '' + #13#10 +
    '9. Non-Disclosure' + #13#10 +
    '' + #13#10 +
    'For a period of ten (10) years from the last date that SECOPS SOLUTION delivers to Licensee any SECOPS SOLUTION Program or any update or improvement thereto, Licensee shall' + #13#10 +
    '' + #13#10 +
    'keep confidential and utilize its best efforts to prevent unauthorized disclosure or use of any SECOPS SOLUTION Program, and' + #13#10 +
    '' + #13#10 +
    'treat all SECOPS SOLUTION Programs with the same degree of care as it treats like information of its own which it does not want to be publicly disclosed or the subject of unauthorized access or use, and' + #13#10 +
    '' + #13#10 +
    'not make or permit to be made any more copies of any SECOPS SOLUTION Program than are necessary for the Licensee''s internal use of that SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    'The obligations in this Section shall not extend to any part of any SECOPS SOLUTION Program which is now or hereafter publicly known by virtue of disclosures not attributable to Licensee, its agents, employees, consultants, contractors, or any other person or entity under similar restriction not to make such disclosures.' + #13#10 +
    '' + #13#10 +
    '10. Warranty' + #13#10 +
    '' + #13#10 +
    'There is no express warranty provided for this trial license.' + #13#10 +
    '' + #13#10 +
    '11. Limitation of Liability' + #13#10 +
    '' + #13#10 +
    'Licensee expressly acknowledges that:' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION shall not be liable for loss of profit, loss of business, or other financial loss which may be caused, directly or indirectly, by the inadequacy of any SECOPS SOLUTION Program for any purpose or use thereof or by any defect or deficiency therein.' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION shall not have any liability with respect to any loss or damage related to or arising from:' + #13#10 +
    '' + #13#10 +
    'any failure of any SECOPS SOLUTION Program to perform as specified herein except as and to the extent otherwise expressly provided herein; or' + #13#10 +
    '' + #13#10 +
    'any use or application of any SECOPS SOLUTION Program or the results or decisions made or obtained by users of the SECOPS SOLUTION program.' + #13#10 +
    '' + #13#10 +
    'The total of SECOPS SOLUTION''s liabilities to Licensee for damages, if any, shall not exceed the amounts paid by Licensee under this Software License Agreement during the twelve (12) months preceding the assertion of Licensee''s claim.' + #13#10 +
    '' + #13#10 +
    'No action, regardless of form, arising out of any transaction under this Software License Agreement may be brought by Licensee more than one year after the Licensee has, or by the exercise of reasonable diligence should have had, knowledge of the occurrence which gives rise to such action.' + #13#10 +
    '' + #13#10 +
    '12. Termination' + #13#10 +
    '' + #13#10 +
    'Trial/Evaluation Licenses will terminate automatically on the expiration date if not renewed pursuant to the terms of the License as further defined in Section 6 (Duration) above.' + #13#10 +
    '' + #13#10 +
    'SECOPS SOLUTION shall have the right without further obligation or liability to Licensee to terminate this Software License Agreement and Licensee''s license hereunder as to any SECOPS SOLUTION Program.' + #13#10 +
    '' + #13#10 +
    'The following obligations shall survive termination of the Software License Agreement for any reason: (i) Licensee''s obligations under Sections 9 (Non-Disclosure); and (ii) Paragraph (3) of this Section. Termination of this Software License Agreement will not relieve either' + #13#10 +
    '' + #13#10 +
    'Upon the termination of this Software License Agreement as to any SECOPS SOLUTION Program, the license and all other rights granted to Licensee as to that SECOPS SOLUTION Program hereunder shall immediately cease, and Licensee shall immediately:' + #13#10 +
    '' + #13#10 +
    'return that SECOPS SOLUTION Program to SECOPS SOLUTION including all documentation, manuals and copies in respect of that SECOPS SOLUTION Program;' + #13#10 +
    '' + #13#10 +
    'purge all copies of that SECOPS SOLUTION Program and any portions thereof from all CPU''s and storage media and devices on which Licensee has placed or allowed others to place that SECOPS SOLUTION Program; and' + #13#10 +
    '' + #13#10 +
    'upon request provide SECOPS SOLUTION with written certification that Licensee has complied with its obligations under this Paragraph 12(3).' + #13#10 +
    '' + #13#10 +
    '13. General Provisions' + #13#10 +
    '' + #13#10 +
    'Licensee shall not have the right to assign or otherwise transfer its rights or obligations under this Software License Agreement except with the written consent of the other party.' + #13#10 +
    '' + #13#10 +
    'This License will be governed by and construed in accordance with the laws of the State of Delaware, as applied to agreements entered into and to be performed entirely within Delaware between Delaware residents. This License shall not be governed by the United Nations Convention on Contracts for the International Sale of Goods, the application of which is expressly excluded. If for any reason a court of competent jurisdiction finds any provision, or portion thereof, to be unenforceable, the remainder of this License shall continue in full force and effect.' + #13#10 +
    '' + #13#10 +
    'This Software License Agreement supersedes all proposals, oral or written, and all negotiations, conversations or discussions heretofore had between the parties related to this Software License Agreement. Licensee acknowledges that it has not been induced to enter into this Software License Agreement by any representations or statements, oral or written, not expressly contained herein. The terms and conditions of this Software License Agreement shall prevail, notwithstanding any variance with the terms and conditions of any order or other instrument submitted by Licensee.' + #13#10 +
    '' + #13#10 +
    'This Software License Agreement supersedes any and all other Software License Agreements between the parties governing SECOPS SOLUTION Programs.' + #13#10 +
    '' + #13#10 +
    'This Software License Agreement shall not be deemed or construed to be modified, amended, rescinded, cancelled or waived, in whole or in part, except by written amendment signed by the parties hereto.' + #13#10 +
    '' + #13#10 +
    'The obligations of Licensee under Sections 4 (Restrictions on Use) and 9 (Non-Disclosure) hereof are of a special and unique character which gives them a peculiar value to SECOPS SOLUTION for which SECOPS SOLUTION cannot be reasonably or adequately compensated in damages in the event Licensee breaches such obligations. Therefore SECOPS SOLUTION shall, in addition to other remedies which may be available, be entitled to injunctive and other equitable relief in the event of the breach or threatened breach of such obligations.' + #13#10 +
    '' + #13#10 +
    '14. Taxes and Duties' + #13#10 +
    '' + #13#10 +
    'Licensee shall be responsible for taxes levied on any transaction under this Software License Agreement, including but not limited to all federal, state, and local taxes, levies and assessments, excluding any tax based on SECOPS SOLUTION''s income.' + #13#10 +
    '' + #13#10 +
    '15. Notices' + #13#10 +
    '' + #13#10 +
    'Any demand, notice, consent, or other communication required by this Agreement must be given in writing and shall be deemed delivered upon receipt when delivered personally or upon confirmation of receipt following delivery by internationally recognized overnight courier service to the addresses specified on the applicable ordering document (Product Schedule, quote or purchase order).' + #13#10 +
    '' + #13#10 +
    '16. Export Controls' + #13#10 +
    '' + #13#10 +
    'Licensee acknowledges that this Software is subject to the U.S. Export Administration Regulations (the "EAR") and Licensee will comply with the EAR. Licensee shall not export or re-export this Software, directly or indirectly, to: (1) any countries that are subject to US export restrictions; (2) any end user who Licensee knows or has reason to know will utilize them in the design, development or production of nuclear, chemical or biological weapons, or rocket systems, space launch vehicles, and sounding rockets, or unmanned air vehicle systems; or (3) any end user who has been prohibited from participating in the US export transactions by any federal agency of the US government. In addition, Licensee is responsible for complying with any applicable local laws regarding export or use of this Software.' + #13#10 +
    '' + #13#10 +
    '17. Entire Agreement' + #13#10 +
    '' + #13#10 +
    'This Agreement is the complete statement of the understanding between the parties, and supersedes all prior proposals and other communications between the parties. Performance of any obligation required by a party hereunder may be waived only by a written waiver signed by an authorized representative of the other party. Failure or delay by either party in exercising any right or remedy will not constitute a waiver. In the event that any provision of this Agreement shall be declared invalid, the entire Agreement shall not fail on its account, and that provision shall be severed, with the balance of this Agreement continuing in full force and effect. The terms and conditions contained in any purchase order issued by Licensee shall be of no force or effect, even if the order is accepted by SECOPS SOLUTION. This Agreement shall supersede all terms of any unsigned, shrink-wrap or clickwrap license included in any package, media or electronic version of the software and any such software shall be licensed under the terms of this Agreement. In the event of a conflict in terms among the Agreement and a Product Schedule, the Product Schedule shall control. Licensee is an independent contractor and nothing in this Agreement shall be construed to create a partnership, joint venture or agency relationship between SECOPS SOLUTION and Licensee. Certain Software contains product security measures which may include password protection, anti-copying subroutines or other security measures designed to restrict the installation and/or usage of the Software to the licensed configuration.' + #13#10 +
    '' + #13#10 +
    'Appendix: License Supplement' + #13#10 +
    '' + #13#10 +
    'Including but not limited to the following components:' + #13#10 +
    '' + #13#10 +
    'The agentless scan architecture' + #13#10 +
    '' + #13#10 +
    'Various backend and frontend software components' + #13#10 +
    '' + #13#10 +
    'Forwarding agents' + #13#10 +
    '' + #13#10 +
    'Various third-party software components and libraries (list of licenses available in a file called THIRD_PARTY_LICENSES.txt within the SECOPS SOLUTION Programs code bundle)' + #13#10 +
    '' + #13#10 +
    'License Period: Perpetual';

var
  LicenseAgreementPage: TInputOptionWizardPage;
  LicensePage: TInputQueryWizardPage;
  ProgressPage: TOutputProgressWizardPage;
  LicenseKeyValid: Boolean;
  LicenseKey: string;
  LicenseAgreed: Boolean;
  LicenseAgreementText: TRichEditViewer;
  MarginTop: Integer;
  IsSilent: Boolean;
  Licensense_key_parameter_present: Boolean;
  LicenseKey_parameter: string;
  IsLicenseKeyValidated: Boolean;
  isVerySilent: Boolean;
  BaseURLConfigurationPage: TWizardPage;
  DefaultSaaSDomainButton, CustomOnPremDomainButton: TRadioButton;
  CustomOnPremDomainEdit: TEdit;
  CheckConnectivityButton: TButton;
  ConnectivityCheckStatusText: TLabel;
  BaseURL: string;
  PlaceholderText: String;
  FilePath: String;
  RegistrationStatus : Boolean;

function TestConnectivity(): Boolean;
var
  PowerShellScript: String;
  ResultCode: Integer;
begin
  if Exec(ExpandConstant('{tmp}\secops_domain_connectivity_check.exe') ,CustomOnPremDomainEdit.Text, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  begin
    // Check if the secops_domain_connectivity_check.exe executed successfully
    if ResultCode = 0 then
    begin
      Result := True;
    end
    else
    begin
      Result := False;
    end;
  end
  else
  begin
    Result := False;
  end;
end;

procedure VerifyButtonClick(Sender: TObject);
begin
  ConnectivityCheckStatusText.Caption := 'Checking connectivity ...';
  if TestConnectivity() then
    begin
      ConnectivityCheckStatusText.Caption := 'Connected successfully.';
      ConnectivityCheckStatusText.Font.Color := clGreen;
      WizardForm.NextButton.Enabled := True;
      BaseURL := CustomOnPremDomainEdit.Text
    end
  else
    begin
      ConnectivityCheckStatusText.Caption := 'Not reachable';
      ConnectivityCheckStatusText.Font.Color := clRed;
      WizardForm.NextButton.Enabled := False;
    end
end;

procedure CustomLocationEditEnter(Sender: TObject);
begin
  if CustomOnPremDomainEdit.Text = PlaceholderText then
  begin
    CustomOnPremDomainEdit.Text := '';
    CustomOnPremDomainEdit.Font.Color := clWindowText;
  end;
end;

procedure CustomLocationEditExit(Sender: TObject);
begin
  if CustomOnPremDomainEdit.Text = '' then
  begin
    CustomOnPremDomainEdit.Text := PlaceholderText;
    CustomOnPremDomainEdit.Font.Color := clGrayText;
  end;
end;

function RunAgentRegistrationModule(Key: string;show_progress: Boolean): Boolean;
var
  ResultCode: Integer;
begin
  // Run secops_agent_registration_module.exe
  if show_progress then
    begin
    ProgressPage := CreateOutputProgressPage('Agent Registration', '');
    ProgressPage.SetText('Registering Agent ...', '');
    ProgressPage.SetProgress(0, 0);
    ProgressPage.Show;
    end;

  if Exec(ExpandConstant('{tmp}\secops_agent_registration_module.exe') ,Key + ' ' + BaseURL, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  begin
    // Check if the secops_agent_registration_module.exe executed successfully
    if ResultCode = 0 then
    begin
      Result := True; // Proceed with setup
    end
    else
    begin
      MsgBox('Agent Registration failed.', mbError, MB_OK);
      Result := False; // Stop setup
    end;
  end
  else
  begin
    MsgBox('Agent Registration failed.', mbError, MB_OK);
    Result := False; // Stop setup
    
  end;
  ProgressPage.Hide;
end;

procedure LocationButtonClick(Sender: TObject);
begin
  if CustomOnPremDomainButton.Checked then
    begin
      WizardForm.NextButton.Enabled := False;
      CustomOnPremDomainEdit.Visible := True;
      CheckConnectivityButton.Visible := True;
      ConnectivityCheckStatusText.Visible := True;
      ConnectivityCheckStatusText.Caption := '';
      CustomOnPremDomainEdit.Text := 'http://<domain> or http://<ip>:<port>';
      PlaceholderText := CustomOnPremDomainEdit.Text;
      CustomOnPremDomainEdit.Font.Color := clGrayText;
      CustomOnPremDomainEdit.OnEnter := @CustomLocationEditEnter;
      CustomOnPremDomainEdit.OnExit := @CustomLocationEditExit;
    end
  else
    begin
      BaseURL := 'https://api.app.secopsolution.com'
      WizardForm.NextButton.Enabled := True;
      CustomOnPremDomainEdit.Visible := False
      CheckConnectivityButton.Visible := False
      ConnectivityCheckStatusText.Visible := False
      ConnectivityCheckStatusText.Caption := ''
    end
end;

function InitializeSetupVariables(): Boolean;
var
  j: Integer;
begin
  isVerySilent := False;
  for j := 1 to ParamCount do
    if CompareText(ParamStr(j), '/verysilent') = 0 then
    begin
      isVerySilent := True;
      Break;
    end; 
  Result := isVerySilent ;
  if isVerySilent then
    Log ('VerySilent')
  else
    Log ('not VerySilent');
  
end;

procedure InitializeWizard;

begin

  IsSilent := False;
  Licensense_key_parameter_present := False;
  BaseURL := 'https://api.app.secopsolution.com'
  
  ExtractTemporaryFile('secops_domain_connectivity_check.exe');
  ExtractTemporaryFile('secops_agent_registration_module.exe');

  if InitializeSetupVariables() then
  begin
    IsSilent := True;
  end;
  if ExpandConstant('{param:LicenseKey|NotProvided}') = 'NotProvided' then
  begin
    Licensense_key_parameter_present := False;
  end
    else
      begin
      Licensense_key_parameter_present := True;
      LicenseKey_parameter := ExpandConstant('{param:LicenseKey|NotProvided}');
      end;
  if IsSilent and not Licensense_key_parameter_present then
  begin
    Log('Silent Mode but license key not provided')
    Abort
  end;

  if not IsSilent then
  begin

    FilePath := '';
    FilePath := ExpandConstant('{pf32}\Secops Solution CLI\secops_cli_windows-latest.exe');
    // Check if the file exists
    if FileExists(FilePath) then
    begin
      MsgBox('The agent is already installed.', mbError, MB_OK);
      Abort();
    end;
   
    LicenseAgreementPage := CreateInputOptionPage(wpLicense, 'SECOPS SOLUTION, INC: End User License Agreement', '' ,'By installing this software, you agree to the terms and conditions of the License Agreement.', False, False);
    
    LicenseAgreementText := TRichEditViewer.Create(WizardForm);
    LicenseAgreementText.Parent := LicenseAgreementPage.Surface;
    LicenseAgreementText.Visible := True;
    LicenseAgreementText.Left := ScaleX(0);
    LicenseAgreementText.Top := ScaleY(30);
    LicenseAgreementText.Width := ScaleX(520);
    LicenseAgreementText.Height := ScaleY(200);
    LicenseAgreementText.ScrollBars := ssVertical;
    LicenseAgreementText.ReadOnly := True;
    LicenseAgreementText.WordWrap := True;
    LicenseAgreementText.RTFText := AgreementText;
    MarginTop := LicenseAgreementText.Top + LicenseAgreementText.Height + ScaleY(20);
    LicenseAgreementPage.Add('I hereby agree to the terms and conditions of this agreement.');
    LicenseAgreementPage.CheckListBox.Top := MarginTop;
    
    BaseURLConfigurationPage := CreateCustomPage(wpSelectDir, 'Agent Configuration', 'Select platform:');

    DefaultSaaSDomainButton := TRadioButton.Create(WizardForm);
    DefaultSaaSDomainButton.Parent := BaseURLConfigurationPage.Surface;
    DefaultSaaSDomainButton.Caption := 'SaaS';
    DefaultSaaSDomainButton.Top := ScaleY(15);
    DefaultSaaSDomainButton.Height := ScaleY(15);
    DefaultSaaSDomainButton.Checked := True;
    DefaultSaaSDomainButton.OnClick := @LocationButtonClick;

    CustomOnPremDomainButton := TRadioButton.Create(WizardForm);
    CustomOnPremDomainButton.Parent := BaseURLConfigurationPage.Surface;
    CustomOnPremDomainButton.Top := DefaultSaaSDomainButton.Top + DefaultSaaSDomainButton.Height + ScaleY(15);
    CustomOnPremDomainButton.Height := ScaleY(15);
    CustomOnPremDomainButton.Caption := 'On-prem';
    CustomOnPremDomainButton.OnClick := @LocationButtonClick;

    CustomOnPremDomainEdit := TEdit.Create(WizardForm);
    CustomOnPremDomainEdit.Parent := BaseURLConfigurationPage.Surface;
    CustomOnPremDomainEdit.Top := CustomOnPremDomainButton.Top + CustomOnPremDomainButton.Height + ScaleY(8);
    CustomOnPremDomainEdit.Width := BaseURLConfigurationPage.Surface.Width - ScaleX(100);
    CustomOnPremDomainEdit.TabOrder := CustomOnPremDomainButton.TabOrder + 1;
    CustomOnPremDomainEdit.Visible := False;

    CheckConnectivityButton := TButton.Create(WizardForm);
    CheckConnectivityButton.Parent := BaseURLConfigurationPage.Surface;
    CheckConnectivityButton.Caption := 'Verify';
    CheckConnectivityButton.Left := ScaleX(320);
    CheckConnectivityButton.Height := ScaleY(20);
    CheckConnectivityButton.Top := CustomOnPremDomainButton.Top + CustomOnPremDomainButton.Height + ScaleY(8);
    CheckConnectivityButton.Visible := False;
    CheckConnectivityButton.OnClick := @VerifyButtonClick;

    ConnectivityCheckStatusText := TLabel.Create(WizardForm);
    ConnectivityCheckStatusText.Parent := BaseURLConfigurationPage.Surface;
    ConnectivityCheckStatusText.Left := ScaleX(380);
    ConnectivityCheckStatusText.Top := CustomOnPremDomainButton.Top + CustomOnPremDomainButton.Height + ScaleY(10);
    ConnectivityCheckStatusText.Caption := '';
    ConnectivityCheckStatusText.Visible := False;

    LocationButtonClick(nil);

    LicensePage := CreateInputQueryPage(wpSelectComponents, 'License Activation', 'Enter your license key:', 'Please enter your license key to activate the software.');
    LicensePage.Add('License Key:', False);

    ProgressPage := CreateOutputProgressPage('License Activation', 'Validating license key ...');
  end;
end;

function BoolToStr(Value: Boolean): String; 
begin
  if Value then
    Result := 'Yes'
  else
    Result := 'No';
end;

function MakeHttpRequest(Url: string): bool;
var
  WinHttpReq: Variant;
begin
  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
  WinHttpReq.Open('GET', Url, False);
  WinHttpReq.Send('');

  if WinHttpReq.Status = 200 then
    Result := True
  else
    Result := False;
end;

function ValidateLicenseKey(Key: string): Boolean;
var
  Response: bool;
begin
  // Perform the license key validation by making an API request to the backend
  // Replace the URL below with your actual API endpoint for license validation
  Response := MakeHttpRequest(BaseURL + '/secops/v1.0/agent/validate_license_key?key=' + Key);

  // Process the response and return true or false based on the validation result
  IsLicenseKeyValidated := True
  if Response then
    Result := True
  else
    Result := False;
end;

function GetLicenseKey(Param: string): string;
begin
  if not IsSilent then
    Result := LicensePage.Values[0]
  else
   Result := LicenseKey_parameter
end;

function GetBaseURL(Param: string): string;
begin
   Result := BaseURL
end;


function LicenseAgreementAccepted(Param: string): Boolean;
begin
  Result := LicenseAgreementPage.Values[0];
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if not IsSilent then
  begin
    if CurPageID = LicenseAgreementPage.ID then
    begin
      if not LicenseAgreementAccepted('') then
      begin
        MsgBox('Please read and accept the License Agreement to proceed.', mbError, MB_OK);
        Result := False;
        Exit;
      end
      else
      begin
        Result := True;
        Exit;
      end;
    end
    else if CurPageID = BaseURLConfigurationPage.ID then
    begin
        Result := True;
        Exit;
    end
    else if CurPageID = LicensePage.ID then
      begin
        try
          ProgressPage.SetText('Validating license key...', '');
          ProgressPage.SetProgress(0, 0);
          ProgressPage.Show;

          LicenseKeyValid := ValidateLicenseKey(LicensePage.Values[0]);

          if not LicenseKeyValid then
            begin
              MsgBox('Invalid license key. Please try again.', mbError, MB_OK);
              Result := False;
              ProgressPage.Hide;
            end
          else
            begin
              Result := True;
              ProgressPage.Hide;
              RegistrationStatus := RunAgentRegistrationModule(LicensePage.Values[0],true);
              if not RegistrationStatus then
                Result := False;
            end;
        finally
          Log('Done');
        end;
      end
    else
      Result := True;
  end
  else
  begin
    if not IsLicenseKeyValidated then
    begin
      try
        LicenseKeyValid := ValidateLicenseKey(LicenseKey_parameter);

        if not LicenseKeyValid then
          begin
            MsgBox('Invalid license key. Please try again.', mbError, MB_OK);
            Result := False;
            Abort;
          end
        else
          begin
            Result := True;
            RegistrationStatus := RunAgentRegistrationModule(LicenseKey_parameter,false);
            if not RegistrationStatus then
              Result := False;
          end;
      finally
        Log('Done');
      end;
    end
    else
      Result := True;
  end;
end;



function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  ResultCode: Integer;
begin
  Exec(ExpandConstant('{app}\uninstall-service.bat'), '', '', 0, ewWaitUntilTerminated, ResultCode);
end;

[UninstallRun]
Filename: "{app}\uninstall-service.bat"; Parameters: "/x" ;Flags: runhidden

[UninstallDelete]
Type: files; Name: "{app}\InstallUtil.InstallLog"
Type: files; Name: "{app}\SecopsService.InstallLog"
Type: filesandordirs; Name: "{app}\Secops"